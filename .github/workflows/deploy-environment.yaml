---
name: Deploy Full Environment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      backend_image:
        description: 'Backend image tag (e.g., sha-abc123 or latest)'
        required: false
        default: 'latest'
      frontend_image:
        description: 'Frontend image tag (e.g., sha-xyz789 or latest)'
        required: false
        default: 'latest'
      run_migrations:
        description: 'Run database migrations'
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout infrastructure
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.32.2"

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: "5.6.0"

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Set environment variables
        id: env
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "name=production" >> $GITHUB_OUTPUT
            echo "prefix=" >> $GITHUB_OUTPUT
          else
            echo "name=staging" >> $GITHUB_OUTPUT
            echo "prefix=staging-" >> $GITHUB_OUTPUT
          fi
          echo "Environment: ${{ steps.env.outputs.name }}"
          echo "Prefix: ${{ steps.env.outputs.prefix }}"

      - name: Update backend image reference
        if: github.event.inputs.backend_image != ''
        run: |
          echo "Updating backend image reference for ${{ steps.env.outputs.name }} to ${{ github.event.inputs.backend_image }}"
          cd overlays/${{ steps.env.outputs.name }}/backend
          kustomize edit set image ghcr.io/dlsu-lscs/leap25-backend=ghcr.io/dlsu-lscs/leap25-backend:${{ github.event.inputs.backend_image }}
          cd ../../../

      - name: Update frontend image reference
        if: github.event.inputs.frontend_image != ''
        run: |
          echo "Updating frontend image reference for ${{ steps.env.outputs.name }} to ${{ github.event.inputs.frontend_image }}"
          cd overlays/${{ steps.env.outputs.name }}/frontend
          kustomize edit set image ghcr.io/dlsu-lscs/leap25-frontend=ghcr.io/dlsu-lscs/leap25-frontend:${{ github.event.inputs.frontend_image }}
          cd ../../../

      - name: Run migrations
        if: github.event.inputs.run_migrations == 'true'
        timeout-minutes: 5
        run: |
          set -e
          echo "Applying migrations for ${{ steps.env.outputs.name }} environment"

          # update migration job image if backend image is specified
          if [ -n "${{ github.event.inputs.backend_image }}" ]; then
            cd base/migrations
            kustomize edit set image ghcr.io/dlsu-lscs/leap25-backend=ghcr.io/dlsu-lscs/leap25-backend:${{ github.event.inputs.backend_image }}
            cd ../../
          fi

          # apply migration job with name prefix for the environment
          TEMP_KUST_DIR=$(mktemp -d)
          cat <<EOF > $TEMP_KUST_DIR/kustomization.yaml
          apiVersion: kustomize.config.k8s.io/v1beta1
          kind: Kustomization
          resources:
          - ../base/migrations
          namePrefix: ${{ steps.env.outputs.prefix }}
          EOF

          kubectl apply -k $TEMP_KUST_DIR
          rm -rf $TEMP_KUST_DIR

          JOB_NAME="${{ steps.env.outputs.prefix }}leap25-db-migration"
          echo "Migration job name: $JOB_NAME"

          echo "Waiting for migration job completion..."
          kubectl wait --for=condition=complete job/$JOB_NAME --timeout=300s

          if [ $? -ne 0 ]; then
            echo "Migration job failed or timed out"
            kubectl logs job/$JOB_NAME
            exit 1
          fi

          echo "Migrations completed successfully"
          kubectl logs job/$JOB_NAME

      - name: Deploy full environment
        timeout-minutes: 10
        run: |
          echo "Deploying full environment to ${{ steps.env.outputs.name }}"

          # apply all components for the environment
          kubectl apply -k overlays/${{ steps.env.outputs.name }}

          echo "Waiting for backend deployment rollout..."
          kubectl rollout status deployment/${{ steps.env.outputs.prefix }}leap25-backend --timeout=300s

          echo "Waiting for frontend deployment rollout..."
          kubectl rollout status deployment/${{ steps.env.outputs.prefix }}leap25-frontend --timeout=300s

          echo "Checking HPA status..."
          kubectl get hpa

          echo "Environment deployment completed successfully"

      - name: Cleanup migration job
        if: always() && github.event.inputs.run_migrations == 'true'
        continue-on-error: true
        run: |
          echo "Cleaning up migration job..."
          kubectl delete job/${{ steps.env.outputs.prefix }}leap25-db-migration

      - name: Notify deployment success
        if: success()
        run: |
          echo "Environment deployment to ${{ steps.env.outputs.name }} completed successfully"
          echo "Backend image: ${{ github.event.inputs.backend_image || 'unchanged' }}"
          echo "Frontend image: ${{ github.event.inputs.frontend_image || 'unchanged' }}"
          echo "Migrations run: ${{ github.event.inputs.run_migrations }}"
          # add notification integration (Slack, Teams, etc.)

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "Environment deployment to ${{ steps.env.outputs.name }} failed"
          echo "Backend image: ${{ github.event.inputs.backend_image || 'unchanged' }}"
          echo "Frontend image: ${{ github.event.inputs.frontend_image || 'unchanged' }}"
          echo "Migrations run: ${{ github.event.inputs.run_migrations }}"
          # add notification integration (Slack, Teams, etc.)

      - name: Verify full environment health
        timeout-minutes: 5
        run: |
          echo "Verifying complete environment health..."

          # verify backend health
          echo "Checking backend health..."
          BACKEND_HEALTH_STATUS=$(kubectl exec deploy/${{ steps.env.outputs.prefix }}leap25-backend -- curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/health/live || echo "Failed")

          if [[ "$BACKEND_HEALTH_STATUS" == "200" ]]; then
            echo "✅ Backend health check: PASSED"
          else
            echo "❌ Backend health check: FAILED with status $BACKEND_HEALTH_STATUS"
            echo "Backend logs:"
            kubectl logs deploy/${{ steps.env.outputs.prefix }}leap25-backend --tail=20
          fi

          # verify frontend health
          echo "Checking frontend health..."
          # test pod for frontend checks
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Pod
          metadata:
            name: env-healthcheck
            namespace: default
            labels:
              app: env-healthcheck
          spec:
            containers:
            - name: curl
              image: curlimages/curl:7.88.1
              command: ["sleep", "300"]
            restartPolicy: Never
          EOF

          kubectl wait --for=condition=ready pod/env-healthcheck --timeout=60s

          # use the pod to test the frontend service
          FRONTEND_HEALTH_STATUS=$(kubectl exec env-healthcheck -- curl -s -o /dev/null -w "%{http_code}" http://${{ steps.env.outputs.prefix }}leap25-frontend.default.svc.cluster.local:80/ || echo "Failed")

          if [[ "$FRONTEND_HEALTH_STATUS" =~ ^(200|301|302)$ ]]; then
            echo "✅ Frontend health check: PASSED with status $FRONTEND_HEALTH_STATUS"
          else
            echo "❌ Frontend health check: FAILED with status $FRONTEND_HEALTH_STATUS"
            echo "Attempting detailed diagnosis:"
            kubectl exec env-healthcheck -- curl -v http://${{ steps.env.outputs.prefix }}leap25-frontend.default.svc.cluster.local:80/
          fi

          # verify external ingress if possible (depends on DNS propagation)
          echo "Note: External ingress verification not attempted as it requires DNS propagation"

          # report overall status
          if [[ "$BACKEND_HEALTH_STATUS" == "200" ]] && [[ "$FRONTEND_HEALTH_STATUS" =~ ^(200|301|302)$ ]]; then
            echo "✅ Overall environment health: GOOD"
          else
            echo "⚠️ Some health checks failed - environment may require attention"
            if [[ "$BACKEND_HEALTH_STATUS" != "200" ]]; then
              echo "- Backend health check failed"
            fi
            if [[ ! "$FRONTEND_HEALTH_STATUS" =~ ^(200|301|302)$ ]]; then
              echo "- Frontend health check failed"
            fi

            # display resource status for debugging
            echo "Deployment status:"
            kubectl get deployments | grep leap25
            echo "Pod status:"
            kubectl get pods | grep leap25
            echo "HPA status:"
            kubectl get hpa | grep leap25

            # exit with error if required
            # Uncomment to make the pipeline fail if health checks fail
            # exit 1
          fi

          # clean up test pod
          kubectl delete pod env-healthcheck
