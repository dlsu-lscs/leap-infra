---
name: Deploy Backend

on:
  repository_dispatch:
    types: [backend-update]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout infrastructure
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.32.2"

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: "5.6.0"

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event.client_payload.branch }}" == "main" ]; then
            echo "name=production" >> $GITHUB_OUTPUT
            echo "prefix=" >> $GITHUB_OUTPUT
          else
            echo "name=staging" >> $GITHUB_OUTPUT
            echo "prefix=staging-" >> $GITHUB_OUTPUT
          fi
          echo "Environment: ${{ steps.env.outputs.name }}"
          echo "Prefix: ${{ steps.env.outputs.prefix }}"

      - name: Download migrations
        if: github.event.client_payload.has_migrations == true
        uses: dawidd6/action-download-artifact@v9
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: build-push-deploy.yml
          name: migrations-${{ github.event.client_payload.commit_sha }}
          repo: dlsu-lscs/leap25-backend
          path: migrations-archive
          check_artifacts: true
          search_artifacts: true

      - name: Extract migrations
        if: github.event.client_payload.has_migrations == true
        run: |
          mkdir -p temp-migrations/migrations
          tar -xzf migrations-archive/migrations.tar.gz -C temp-migrations/ || {
            echo "Failed to extract migrations archive"
            exit 1
          }
          echo "Migrations extracted successfully"
          ls -la temp-migrations/migrations/

      - name: Update backend image reference
        run: |
          echo "Updating backend image reference for ${{ steps.env.outputs.name }} to ${{ github.event.client_payload.image }}"
          cd overlays/${{ steps.env.outputs.name }}/backend
          kustomize edit set image ghcr.io/dlsu-lscs/leap25-backend=${{ github.event.client_payload.image }}
          cd ../../../

      - name: Apply migrations
        if: github.event.client_payload.has_migrations == true
        id: migrations
        timeout-minutes: 5
        run: |
          set -e
          echo "Applying migrations for ${{ steps.env.outputs.name }} environment"

          mkdir -p temp-migrations

          # temporary kustomization file for migrations
          cat <<EOF > temp-migrations/kustomization.yaml
          apiVersion: kustomize.config.k8s.io/v1beta1
          kind: Kustomization
          resources:
          - $(pwd)/base/migrations  # Use absolute path to the base migrations directory
          namePrefix: ${{ steps.env.outputs.prefix }}
          images:
          - name: ghcr.io/dlsu-lscs/leap25-backend
            newName: ghcr.io/dlsu-lscs/leap25-backend
            newTag: ${{ github.event.client_payload.image }}
          EOF

          echo "Applying migration job..."
          kubectl apply -k temp-migrations/

          JOB_NAME="${{ steps.env.outputs.prefix }}leap25-db-migration"
          echo "Migration job name: $JOB_NAME"

          echo "Waiting for migration job completion..."
          kubectl wait --for=condition=complete job/$JOB_NAME --timeout=300s

          if [ $? -ne 0 ]; then
            echo "Migration job failed or timed out"
            kubectl logs job/$JOB_NAME
            exit 1
          fi

          echo "Migrations completed successfully"
          kubectl logs job/$JOB_NAME

      - name: Deploy backend application
        timeout-minutes: 10
        run: |
          echo "Deploying backend to ${{ steps.env.outputs.name }} environment"

          # apply updated backend deployment with HPAs
          kubectl apply -k overlays/${{ steps.env.outputs.name }}/backend
          kubectl apply -k overlays/${{ steps.env.outputs.name }}/hpa/backend-hpa.yaml

          echo "Waiting for deployment rollout..."
          kubectl rollout status deployment/${{ steps.env.outputs.prefix }}leap25-backend --timeout=300s

          # verify HPA is running properly
          echo "Checking HPA status..."
          kubectl get hpa ${{ steps.env.outputs.prefix }}leap25-backend-hpa

          echo "Backend deployment completed successfully"

      - name: Cleanup migration job
        if: always() && github.event.client_payload.has_migrations == true
        continue-on-error: true
        run: |
          echo "Cleaning up migration job..."
          kubectl delete job/${{ steps.env.outputs.prefix }}leap25-db-migration
          rm -rf temp-migrations

      - name: Notify deployment success
        if: success()
        run: |
          echo "[PASSED] Backend deployment to ${{ steps.env.outputs.name }} completed successfully"
          echo "Environment: ${{ steps.env.outputs.name }}"
          echo "Image: ${{ github.event.client_payload.image }}"
          echo "Has Migrations: ${{ github.event.client_payload.has_migrations }}"
          # TODO: add notification integration (Slack, Teams, etc.)

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "[FAILED] Backend deployment to ${{ steps.env.outputs.name }} failed"
          echo "Environment: ${{ steps.env.outputs.name }}"
          echo "Image: ${{ github.event.client_payload.image }}"
          echo "Has Migrations: ${{ github.event.client_payload.has_migrations }}"
          # TODO: add notification integration (Slack, Teams, etc.)

      - name: Verify backend deployment health
        run: |
          echo "Verifying backend deployment health..."
          # internal health endpoint check
          echo "Checking internal backend health endpoint..."
          INTERNAL_STATUS=$(kubectl exec deploy/${{ steps.env.outputs.prefix }}leap25-backend -- curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/health/live || echo "Failed")

          if [[ "$INTERNAL_STATUS" == "200" ]]; then
            echo "[PASSED] Internal backend health check: PASSED"
          else
            echo "[FAILED] Internal backend health check: FAILED with status $INTERNAL_STATUS"
            echo "Fetching logs for debugging:"
            kubectl logs deploy/${{ steps.env.outputs.prefix }}leap25-backend --tail=50
          fi

          # external ingress check
          DOMAIN="${{ steps.env.outputs.name == 'production' && 'api.dlsucso-leap.com' || 'api-staging.dlsucso-leap.com' }}"
          echo "Checking external backend ingress at https://$DOMAIN/health/live..."

          # test pod for external checks
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Pod
          metadata:
            name: backend-healthcheck
            namespace: default
            labels:
              app: backend-healthcheck
          spec:
            containers:
            - name: curl
              image: curlimages/curl:7.88.1
              command: ["sleep", "300"]
            restartPolicy: Never
          EOF

          kubectl wait --for=condition=ready pod/backend-healthcheck --timeout=60s

          EXTERNAL_STATUS=$(kubectl exec backend-healthcheck -- curl -s -o /dev/null -w "%{http_code}" -k https://$DOMAIN/health/live --connect-timeout 10 || echo "Failed")

          if [[ "$EXTERNAL_STATUS" == "200" ]]; then
            echo "[PASSED] External backend ingress check: PASSED"
          else
            echo "[FAILED] External backend ingress check: NO RESPONSE or FAILED with status $EXTERNAL_STATUS"
            echo "This might be expected if DNS hasn't propagated yet or certificates aren't ready"
            kubectl get ingress | grep backend
            kubectl describe ingress ${{ steps.env.outputs.prefix }}leap25-backend-ingress
            kubectl get certificate | grep backend
          fi

          kubectl delete pod backend-healthcheck

          # only fail the step if the internal check failed (external might need time for DNS/certs)
          if [[ "$INTERNAL_STATUS" != "200" ]]; then
            echo "Backend deployment verification failed"
            exit 1
          fi
